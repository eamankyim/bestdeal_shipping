// Prisma Schema for ShipEASE Backend
// Database: PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== User Management ====================

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  passwordHash  String   @map("password_hash")
  name          String
  role          String   // 'superadmin', 'admin', 'driver', 'warehouse', 'delivery_agent', 'user'
  avatarUrl     String?  @map("avatar_url")
  phone         String?
  warehouseLocation String? @map("warehouse_location") // 'Ghana Warehouse', 'UK Warehouse', etc.
  active        Boolean  @default(true)
  emailVerified Boolean  @default(false) @map("email_verified")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  lastLogin     DateTime? @map("last_login")

  // Relationships
  createdJobs          Job[]          @relation("JobCreator")
  assignedDriverJobs   Job[]          @relation("AssignedDriver")
  assignedDeliveryJobs Job[]          @relation("AssignedDeliveryAgent")
  sentInvitations      Invitation[]   @relation("InvitationSender")
  createdCustomers     Customer[]     @relation("CustomerCreator")
  notifications        Notification[]
  refreshTokens        RefreshToken[]
  createdBatches       Batch[]        @relation("BatchCreator")
  createdInvoices      Invoice[]      @relation("InvoiceCreator")
  jobTimelines         JobTimeline[]
  jobDocuments         JobDocument[]
  auditLogs            AuditLog[]

  @@index([email])
  @@index([role])
  @@map("users")
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  displayName String   @map("display_name")
  description String?
  permissions Json     // Array of permission strings
  color       String?
  isSystem    Boolean  @default(false) @map("is_system")
  createdAt   DateTime @default(now()) @map("created_at")

  @@index([name])
  @@map("roles")
}

model Invitation {
  id               String    @id @default(uuid())
  email            String
  role             String
  warehouseLocation String?  @map("warehouse_location") // 'Ghana Warehouse', 'UK Warehouse', etc.
  invitedBy        String    @map("invited_by")
  token            String    @unique
  status           String    @default("pending") // 'pending', 'accepted', 'expired'
  expiresAt        DateTime  @map("expires_at")
  acceptedAt       DateTime? @map("accepted_at")
  createdAt        DateTime  @default(now()) @map("created_at")

  // Relationships
  inviter User @relation("InvitationSender", fields: [invitedBy], references: [id])

  @@index([token])
  @@index([email])
  @@map("invitations")
}

// ==================== Customer Management ====================

model Customer {
  id           String   @id @default(uuid())
  name         String
  email        String?
  phone        String?
  address      String?  @db.Text
  customerType String   @map("customer_type") // 'Individual', 'Company'
  notes        String?  @db.Text
  createdBy    String   @map("created_by")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relationships
  creator  User      @relation("CustomerCreator", fields: [createdBy], references: [id])
  jobs     Job[]
  invoices Invoice[]

  @@index([email])
  @@index([customerType])
  @@index([createdAt])
  @@map("customers")
}

// ==================== Job Management ====================

model Job {
  id                    String    @id @default(uuid())
  trackingId            String    @unique @map("tracking_id")
  customerId            String    @map("customer_id")
  
  // Addresses
  pickupAddress         String    @map("pickup_address") @db.Text
  deliveryAddress       String    @map("delivery_address") @db.Text
  
  // Parcel Details
  description           String?
  weight                Decimal?  @db.Decimal(10, 2)
  dimensionsLength      Decimal?  @map("dimensions_length") @db.Decimal(10, 2)
  dimensionsWidth       Decimal?  @map("dimensions_width") @db.Decimal(10, 2)
  dimensionsHeight      Decimal?  @map("dimensions_height") @db.Decimal(10, 2)
  value                 Decimal?  @db.Decimal(10, 2)
  quantity              Int       @default(1)
  
  // Dates & Status
  pickupDate            DateTime? @map("pickup_date")
  estimatedDelivery     DateTime? @map("estimated_delivery")
  actualDelivery        DateTime? @map("actual_delivery")
  status                String    @default("Pending Collection")
  priority              String    @default("Standard") // 'Standard', 'Express', 'Urgent'
  
  // Assignment
  assignedDriverId      String?   @map("assigned_driver_id")
  assignedDeliveryAgentId String? @map("assigned_delivery_agent_id")
  warehouseLocation     String?   @map("warehouse_location")
  
  // Batch
  batchId               String?   @map("batch_id")
  
  // Additional Info
  specialInstructions   String?   @map("special_instructions") @db.Text
  notes                 String?   @db.Text
  
  // Metadata
  createdBy             String    @map("created_by")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  // Relationships
  customer        Customer      @relation(fields: [customerId], references: [id])
  creator         User          @relation("JobCreator", fields: [createdBy], references: [id])
  assignedDriver  User?         @relation("AssignedDriver", fields: [assignedDriverId], references: [id])
  assignedDeliveryAgent User?   @relation("AssignedDeliveryAgent", fields: [assignedDeliveryAgentId], references: [id])
  batch           Batch?        @relation(fields: [batchId], references: [id])
  timeline        JobTimeline[]
  documents       JobDocument[]
  invoiceItems    InvoiceItem[]

  @@index([trackingId])
  @@index([customerId])
  @@index([status])
  @@index([assignedDriverId])
  @@index([batchId])
  @@index([pickupDate])
  @@index([createdAt])
  @@index([customerId, status])
  @@index([assignedDriverId, status])
  @@map("jobs")
}

model JobTimeline {
  id        String   @id @default(uuid())
  jobId     String   @map("job_id")
  status    String
  location  String?
  notes     String?  @db.Text
  updatedBy String   @map("updated_by")
  timestamp DateTime @default(now())

  // Relationships
  job     Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  updater User @relation(fields: [updatedBy], references: [id])

  @@index([jobId])
  @@index([timestamp])
  @@map("job_timeline")
}

model JobDocument {
  id           String   @id @default(uuid())
  jobId        String   @map("job_id")
  documentType String   @map("document_type") // 'photo', 'signature', 'proof_of_delivery', 'invoice', 'attachment'
  fileName     String   @map("file_name")
  fileUrl      String?  @map("file_url") // Optional - can be null if storing in DB
  fileData     Bytes?   @map("file_data") // Binary data stored in DB
  fileSize     Int?     @map("file_size")
  mimeType     String?  @map("mime_type")
  uploadedBy   String   @map("uploaded_by")
  uploadedAt   DateTime @default(now()) @map("uploaded_at")

  // Relationships
  job      Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  uploader User @relation(fields: [uploadedBy], references: [id])

  @@index([jobId])
  @@index([documentType])
  @@map("job_documents")
}

// ==================== Batch Management ====================

model Batch {
  id                 String    @id @default(uuid())
  batchId            String    @unique @map("batch_id")
  destination        String
  route              String?   // Full route (e.g., "London â†’ Accra")
  carrier            String?
  trackingNumber     String?   @map("tracking_number")
  
  // Batch Info
  totalJobs          Int       @default(0) @map("total_jobs")
  totalWeight        Decimal   @default(0) @map("total_weight") @db.Decimal(10, 2)
  totalValue         Decimal   @default(0) @map("total_value") @db.Decimal(10, 2)
  
  // Dates & Status
  status             String    @default("In Preparation")
  estimatedShipDate  DateTime? @map("estimated_ship_date")
  actualShipDate     DateTime? @map("actual_ship_date")
  estimatedArrival   DateTime? @map("estimated_arrival")
  actualArrival      DateTime? @map("actual_arrival")
  
  // Additional
  notes              String?   @db.Text
  
  // Metadata
  createdBy          String    @map("created_by")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  shippedAt          DateTime? @map("shipped_at")

  // Relationships
  creator User  @relation("BatchCreator", fields: [createdBy], references: [id])
  jobs    Job[]

  @@index([batchId])
  @@index([status])
  @@index([destination])
  @@index([createdAt])
  @@map("batches")
}

// ==================== Invoice Management ====================

model Invoice {
  id               String    @id @default(uuid())
  invoiceNumber    String    @unique @map("invoice_number")
  customerId       String    @map("customer_id")
  
  // Financial
  subtotal         Decimal   @default(0) @db.Decimal(10, 2)
  tax              Decimal   @default(0) @db.Decimal(10, 2)
  total            Decimal   @default(0) @db.Decimal(10, 2)
  
  // Status & Dates
  status           String    @default("Pending") // 'Pending', 'Paid', 'Overdue', 'Cancelled'
  issueDate        DateTime  @map("issue_date")
  dueDate          DateTime  @map("due_date")
  paidDate         DateTime? @map("paid_date")
  
  // Payment
  paymentMethod    String?   @map("payment_method")
  paymentReference String?   @map("payment_reference")
  
  // Additional
  notes            String?   @db.Text
  
  // Metadata
  createdBy        String    @map("created_by")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relationships
  customer Customer      @relation(fields: [customerId], references: [id])
  creator  User          @relation("InvoiceCreator", fields: [createdBy], references: [id])
  items    InvoiceItem[]

  @@index([invoiceNumber])
  @@index([customerId])
  @@index([status])
  @@index([dueDate])
  @@index([customerId, issueDate])
  @@map("invoices")
}

model InvoiceItem {
  id          String  @id @default(uuid())
  invoiceId   String  @map("invoice_id")
  jobId       String? @map("job_id")
  description String
  quantity    Int     @default(1)
  unitPrice   Decimal @map("unit_price") @db.Decimal(10, 2)
  total       Decimal @db.Decimal(10, 2)

  // Relationships
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  job     Job?    @relation(fields: [jobId], references: [id])

  @@index([invoiceId])
  @@index([jobId])
  @@map("invoice_items")
}

// ==================== Pricing ====================

model Pricing {
  id          String   @id @default(uuid())
  destination String
  weightMin   Decimal  @map("weight_min") @db.Decimal(10, 2)
  weightMax   Decimal  @map("weight_max") @db.Decimal(10, 2)
  price       Decimal  @db.Decimal(10, 2)
  currency    String   @default("GBP")
  serviceType String   @default("Standard") @map("service_type")
  active      Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([destination])
  @@index([serviceType])
  @@index([active])
  @@map("pricing")
}

// ==================== Notifications ====================

model Notification {
  id                String    @id @default(uuid())
  userId            String    @map("user_id")
  type              String    // 'job_status', 'assignment', 'invoice', 'system'
  title             String
  message           String    @db.Text
  isRead            Boolean   @default(false) @map("is_read")
  relatedEntityType String?   @map("related_entity_type") // 'job', 'invoice', 'batch'
  relatedEntityId   String?   @map("related_entity_id")
  createdAt         DateTime  @default(now()) @map("created_at")
  readAt            DateTime? @map("read_at")

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@index([userId, isRead, createdAt])
  @@map("notifications")
}

// ==================== Authentication ====================

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  revoked   Boolean  @default(false)

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

// ==================== System ====================

model Setting {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String?  @db.Text
  description String?  @db.Text
  type        String?  // 'string', 'number', 'boolean', 'json'
  updatedBy   String?  @map("updated_by")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([key])
  @@map("settings")
}

// ==================== Audit Logs ====================

model AuditLog {
  id         String   @id @default(uuid())
  userId     String?  @map("user_id")
  action     String   // 'create', 'update', 'delete'
  entityType String   @map("entity_type") // 'job', 'customer', 'invoice', etc.
  entityId   String?  @map("entity_id")
  oldValues  Json?    @map("old_values")
  newValues  Json?    @map("new_values")
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent") @db.Text
  timestamp  DateTime @default(now())

  // Relationships
  user User? @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entityType])
  @@index([entityId])
  @@index([timestamp])
  @@map("audit_logs")
}
